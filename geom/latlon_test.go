package geom_test

import (
	"strconv"
	"strings"
	"testing"

	. "github.com/OutOfBedlam/ots/geom"

	"github.com/stretchr/testify/assert"
)

func TestPerpendicularLineSegment(t *testing.T) {
	var a, b, c, d LatLon
	var in bool

	a = LatLon{Lon: 0, Lat: 0}
	b = LatLon{Lon: 5, Lat: 0}
	c = LatLon{Lon: 2.5, Lat: 3}
	d, in = PerpendicularPoint(a, b, c)
	assert.True(t, in)
	assert.Equal(t, d.Lon, 2.5)
	assert.Equal(t, d.Lat, 0.0)

	c = LatLon{Lon: -0.0, Lat: -3}
	d, in = PerpendicularPoint(a, b, c)
	assert.True(t, in)
	assert.Equal(t, d.Lon, 0.0)
	assert.Equal(t, d.Lat, 0.0)

	c = LatLon{Lon: -0.1, Lat: 3}
	d, in = PerpendicularPoint(a, b, c)
	assert.False(t, in)
	assert.Equal(t, d.Lon, -0.1)
	assert.Equal(t, d.Lat, 0.0)

	a = LatLon{Lon: 0, Lat: 2}
	b = LatLon{Lon: 2, Lat: 0}
	c = LatLon{Lon: 2, Lat: 2}
	d, in = PerpendicularPoint(a, b, c)
	assert.True(t, in)
	assert.Equal(t, d.Lon, 1.0)
	assert.Equal(t, d.Lat, 1.0)

	c = LatLon{Lon: 0, Lat: 0}
	d, in = PerpendicularPoint(a, b, c)
	assert.True(t, in)
	assert.Equal(t, d.Lon, 1.0)
	assert.Equal(t, d.Lat, 1.0)
}

func perpendicularOnLink(t *testing.T, linkCoords string, c LatLon) (LatLon, float64, bool) {

	as := make([]LatLon, 0)
	toks := strings.Split(linkCoords, " ")
	for _, t := range toks {
		str := strings.Split(t, ",")
		lat, _ := strconv.ParseFloat(str[0], 64)
		lon, _ := strconv.ParseFloat(str[1], 64)
		as = append(as, LatLon{Lat: lat, Lon: lon})
	}
	found := false
	dist := 0.0
	var a, b, d LatLon
	var in bool
	for i := range as[1:] {
		a = as[i]
		b = as[i+1]
		d, in = PerpendicularPoint(a, b, c)
		dist := c.DistanceEuclidean(d)
		if d.Lat == d.Lat && d.Lon == d.Lon { // filt out NaN
			found = true
			t.Logf("%d %t dist:%f d:%v ab:[%v %v]", i, in, dist, d, a, b)
		}
	}
	assert.True(t, found)

	return d, dist, found
}

func TestPerpendicularCoord_1(t *testing.T) {
	coords := "36.48559,127.71184 36.48585,127.71208 36.48594,127.71216 36.48594,127.71216 36.48624,127.71246 36.48668,127.71290 36.48691,127.71316 36.48710,127.71339 36.48719,127.71351 36.48742,127.71383 36.48749,127.71393 36.48754,127.71401 36.48768,127.71427 36.48772,127.71436 36.48787,127.71466 36.48802,127.71499 36.48811,127.71525 36.48811,127.71525 36.48811,127.71525 36.48811,127.71525 36.48812,127.71525 36.48812,127.71525 36.48812,127.71525 36.48812,127.71525 36.48812,127.71525 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71526 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48812,127.71527 36.48817,127.71532 36.48817,127.71532 36.48817,127.71532 36.48817,127.71532 36.48817,127.71532 36.48817,127.71532 36.48817,127.71532 36.48817,127.71532 36.48817,127.71532 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48817,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71533 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48818,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48819,127.71534 36.48822,127.71535 36.48825,127.71556"
	c := LatLon{Lat: 36.48829, Lon: 127.71524}
	d, _, _ := perpendicularOnLink(t, coords, c)
	assert.True(t, d.Lat == d.Lat)
	assert.True(t, d.Lon == d.Lon)
}
