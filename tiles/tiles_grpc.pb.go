// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: tiles.proto

package tiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TileClient is the client API for Tile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TileClient interface {
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
}

type tileClient struct {
	cc grpc.ClientConnInterface
}

func NewTileClient(cc grpc.ClientConnInterface) TileClient {
	return &tileClient{cc}
}

func (c *tileClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/Tile/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tileClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/Tile/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tileClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/Tile/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TileServer is the server API for Tile service.
// All implementations must embed UnimplementedTileServer
// for forward compatibility
type TileServer interface {
	Find(context.Context, *FindRequest) (*FindResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	mustEmbedUnimplementedTileServer()
}

// UnimplementedTileServer must be embedded to have forward compatible implementations.
type UnimplementedTileServer struct {
}

func (UnimplementedTileServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedTileServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTileServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedTileServer) mustEmbedUnimplementedTileServer() {}

// UnsafeTileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TileServer will
// result in compilation errors.
type UnsafeTileServer interface {
	mustEmbedUnimplementedTileServer()
}

func RegisterTileServer(s grpc.ServiceRegistrar, srv TileServer) {
	s.RegisterService(&Tile_ServiceDesc, srv)
}

func _Tile_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TileServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tile/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TileServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tile_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TileServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tile/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TileServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tile_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TileServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tile/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TileServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tile_ServiceDesc is the grpc.ServiceDesc for Tile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tile",
	HandlerType: (*TileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _Tile_Find_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tile_Get_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _Tile_Scan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tiles.proto",
}
